kadane's algo: maximum sum of subarray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi= nums[0];
        int sum = 0;
        for(int i =0 ; i<nums.size();i++){
            sum = sum + nums[i];
             maxi= max(sum , maxi);
            if(sum<0){
                sum = 0;
            }
            
           
        }
        return maxi;
        
    }
};

Sliding Window:

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        double sum = 0;
        
         for(int i =0 ; i<k;i++){
             sum+=nums[i];
         }
        double maxSum = sum;
        for(int i = k ; i<nums.size();i++){
            sum+=nums[i];
            sum-=nums[i-k];
            maxSum = max(maxSum , sum);
        }
        
        return maxSum/k;
        
    }
};



// concept of upper bound:

//for upperbound array must be sorted;
// upper_bound(prefix.begin(),prefix.end(),query) : it tells the ptr;
//  upper_bound(prefix.begin(),prefix.end(),query) - prefix.begin() : gives no of elememt



**********************************************************************************************************************************************
Sieve of Eratosthenes : Prime Numbers:
if n is given we need to print prime numbers:

# include<bits/stdc++.h>
using namespace std;
void sieve(int n){
    int prime[100] = {0};
    for(int i =2 ; i<n ;i++){
        if(prime[i]==0){
            for(int j = 2*i ; j<=n ; j+=i){
                prime[j] = 1;
            }
        }
    }
    for(int i =2 ; i<n ; i++){
        if(prime[i]==0){
            cout<<i<<" ";
        }
        cout<<endl;
    }
}
int main(){
    int n ; cin>>n ;
    sieve(n);
}

OR...

class Solution {
public:
    int countPrimes(int n) {
        vector<bool> isPrime(n, true);
        long long int count=0;
        if(n==0||n==1||n==2)
            return 0;
        for(long long int i=2;i<n;i++){
            if(isPrime[i]){
                count++;
                for(long long int j=2*i;j<n;j=j+i){
                    isPrime[j]=false;
                }
            }
        }
        return count;
    }
};

*****************************************************************************************************************************************************************************
to check if a is substring of b or not 
if(b.find(a)!=-1)return true;
































