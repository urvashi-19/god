1.
#include <iostream>
using namespace std;
int math(int a, int b)
{
    int sum = 0;
    for (int i = 0; i < a; i++)
    {
        sum = sum + b;
    }
    return sum;
}
int main()
{
    int a, b;
    cin >> a >> b;
    cout << math(a, b);
}

2.
#include <iostream>
using namespace std;
int exp(int x, int n)
{
    int mult = 1;
    for (int i = 0; i < n; i++)
    {
        mult = mult * x;
    }
    return mult;
}
int main()
{
    int x, n;
    cin >> x >> n;
    cout << exp(x, n);
}

3.
#include <iostream>
using namespace std;
int seq(int n)
{
    int sum = 0, i;
    for (i = 1; i <= n; i++)
    {
        int p = (3) * i + 2;
        if (p % 4 != 0)
        {
            cout << p << endl;
        }
        else
        {
            n = n + 1;
        }
    }
}
int main()
{
    int n;
    cin >> n;
    seq(n);
}
********************************************************************************************************************
4.
97531-1
****************************************************************************************************************
5.
# include<iostream>
using namespace std;
int main(){
    int i,n,j;
    for(i=1;i<=4;i++){
        for(j=1;j<=4-i;j++){
            cout<<" ";
        }
        for(j=i;j>=1;j--){
            cout<<j;
        }
        for(int k= 2 ;k<=i ; k++){
            cout<<k;
        }
        cout<<endl;
    }
}

output:
   1
  212
 32123
4321234

*********************************************************************************************
6.
# include<iostream>
using namespace std;
int main(){
    int i ,n ;
    cin>>n;
    for(i=0;i<5;i++){
        int p =1;
        for(int j=0;j<5-i;j++){
            
            cout<<p;
            p++;
        }
    for(int k=1 ;k<i+1;k++){
        cout<<"*";
    }
    for(int t=1;t<=i;t++){
        cout<<"*";
    }
    int r=5-i;
    for(int j=0 ;j<5-i;j++){
        
        cout<<r;
        r--;
    }
    cout<<endl;
    }
}

output:
5
1234554321
1234**4321
123****321
12******21
1********1
**********************************************************************************************
7. intersection of element of two arrays
# include<iostream>
using namespace std;
int main(){
    int t ,n,m ,i,j;
    cin>>t>>n;
    int a[n];
    for(i=0 ;i<n;i++){
        cin>>a[i];
    }
    cout<<endl;
    cin>>m;
    int b[m];
    for(j=0;j<m;j++){
        cin>>b[j];
    }
    cout<<endl;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(a[i]==b[j]){
                cout<<a[i]<<" ";
            }
        }
    }
}

********************************************************************************************
removing duplicates from a string

#include <iostream>
#include <string>
using namespace std;
int main()
{
    string str;
    int i, j, k;
    getline(cin, str);
    for (i = 0; i < str.length(); i++)
    {
        for (j = 0; j < str.length(); j++)
        {
            if (str[i] == str[j])
            {
                break;
            }
        }
        if (i == j)
        {
           
            cout<<str[i];
        }
    }

}

ouput: aabaaaaccccd
abcd

***************************************************************************************************************
 Given a string you have to print all the special chahracter from it only .
input -> &our@bh*()98AB%
Output-> &@*()%

#include <bits\stdc++.h>
using namespace std;
int main()
{
    string ch;
    getline(cin, ch);
    int i;
    for (i = 0; i < ch.length(); i++)
    {
        if ((ch[i]  >= 'A' && ch[i] <= 'Z') || (ch[i] >='a' && ch[i] <='z') || (ch[i] >='0' && ch[i] <='9'))
        {
            continue;
        }
        else{
            cout<<ch[i];
        }
    }
}
*************************************************************************************************************************
 For a given two-dimensional integer array/list of size (N x M), print the array/list in a sine wave order, i.e, print the first column top to bottom, next column bottom to top and so on.
Input -> 3*4 matrix

1 2 3 4
 5 6 7 8
 9 10 11 12

Output ->
1 5 9 10 6 2 3 7 11 12 8 4

#include <iostream>
#include <vector>
using namespace std;
int main()
{
    int m, n, x, i, j, k;
    cout << "enter no of rows and column" << endl;
    cin >> m >> n;
    vector<vector<int>> v;
    for (i = 0; i < m; i++)
    {
        vector<int> temp;
        for (j = 0; j < n; j++)
        {
            cin >> x;
            temp.push_back(x);
        }
        v.push_back(temp);
    }
    for (i = 0; i < v.size(); i++)
    {
        for (j = 0; j < v[i].size(); j++)
        {
            cout << v[i][j] << " ";
        }
        cout << endl;
    }
    j = 0;
    while (j < 4)
    {
        if (j % 2 == 0)
        {
            for (i = 0, k = j; i <= m - 1; i++)
            {

                cout << v[i][k] << " ";
            }
        }

        else if (j % 2 != 0)
        {
            for (i = m - 1, k = j; i >= 0; i--)
            {
                cout << v[i][k] << " ";
            }
        }
        j++;
    }
}
*************************************************************************************************************************
3.
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string str;
    getline(cin, str);
    int i = 0, j = 0, count;
    while (i < str.length())
    {
        count = 1;
        j = i + 1;
        while (j < str.length())
        {
            if (str[i] == str[j])

            {
                count = count + 1;
                j = j + 1;
            }
            else
                break;
        }

       

        if (count > 1)
        {
            cout << str[i] << count;
        }
        else
        {
            cout << str[i];
        }
        i = i + count;
    }
}

output:
input: aaabbcddeeef
output: a3b2cd2e3f
//////////////////////////////////////////////////////////////////////////////

compressed string approach

#include <bits/stdc++.h>
using namespace std;

void compressString(char arr[])
{
    int i=0, j=0, s=0, count=0;
    while(arr[j]!='\0')
    {
        if(arr[i]==arr[j])
        {
            j++;
            count++;
           // j!='\0';
            
        }
        else
        {
            arr[s]=arr[i];
            if(count==1)
            {
                s++;
            }
            else
            {
                arr[s+1]=count+'0';
                s+=2;
            }
            i=j;
            count=0;
        }
    }
    arr[s] = arr[i];
    if(count>1){
    arr[s+1] = count+'0';
    }

    
    arr[s+2]='\0';
    

    int k=0;
    while(arr[k]!='\0')
    {
        cout<<arr[k];
        k++;
    }
}


int main()
{
    char arr[1001];
    cin>>arr;
    compressString(arr);

    return 0;
    
}
/////////////////////////////////////////////////////////////////////////////////////////////////////
using char
#include <bits/stdc++.h>

using namespace std;
int main()
{
    char str[1000];
    
    cin >> str;

    int i = 0, j = 0, count;
    while (str[i] != '\0')
    {
        count = 1;
        j = i + 1;
        while (str[j] != '\0')
        {
            if (str[i] == str[j])

            {
                count = count + 1;
                j = j + 1;
            }
            else
                break;
        }

        if (count > 1)
        {
            cout << str[i] << count;
        }
        else
        {
            cout << str[i];
        }
        i = i + count;
    }
}
***********************************************************************************************************************
swapping of pointers..
# include<bits\stdc++.h>
using namespace std;
void swap(int k, int m){
    int temp = k;
    k = m;
    m = temp;
    
}
int main(){
    int a = 5;
    int b = 7;
    int * aptr = &a;
    int *bptr = &b;
    swap(aptr , bptr);
    cout<<&aptr<<endl; 
    cout<<*aptr<<endl; 
  cout<<a<<endl<<b;
}
output:
7
5
7
while swapping pointers their is need of passing address..
*******************************************************************************************************************
# include<bits\stdc++.h>
using namespace std;
void swap(int k, int m){
    int temp = k;
    k = m;
    m = temp;
    
}
int main(){
    int a = 5;
    int b = 7;
    int * aptr = &a;
    int *bptr = &b;
    cout<<"the address of aptr is :"<<&aptr<<endl;
    cout<<"the address of bptr is :"<<&bptr<<endl;
    cout<<"the value  of aptr is :"<<*aptr<<endl;
    cout<<"the value of bptr is :"<<*bptr<<endl;
    cout<<"the value  of  box of aptr is :"<<aptr<<endl;
    cout<<"the value of  box of  bptr is :"<<bptr<<endl;
    swap(aptr , bptr);
    cout<<"address after swapping  of aptr is : "<<&aptr<<endl;
    cout<<"address after swapping  of bptr is : "<<&bptr<<endl; 
    cout<<"the value of aptr is :"<<*aptr<<endl;
    cout<<"the value of bptr is :"<<*bptr<<endl;
    cout<<"the value  of  box of aptr  after swapping is :"<<aptr<<endl;
    cout<<"the value of  box of  bptr  after swapping is :"<<bptr<<endl;
   
   cout<<a<<endl<<b;
}
output:
the address of aptr is :0x61ff04
the address of bptr is :0x61ff00
the value  of aptr is :5
the value of bptr is :7
the value  of  box of aptr is :0x61ff0c
the value of  box of  bptr is :0x61ff08
address after swapping  of aptr is : 0x61ff04
address after swapping  of bptr is : 0x61ff00
the value of aptr is :7
the value of bptr is :5
the value  of  box of aptr  after swapping is :0x61ff08
the value of  box of  bptr  after swapping is :0x61ff0c
5
7

***********************************************************************************************
inserting element in an sorted array using binary search:

#include <bits/stdc++.h>
using namespace std;

void inputArr(int &n, vector<int> &arr)
{
    int p;
    for (int i = 0; i < n; i++)
    {
        cin >> p;
        arr.push_back(p);
    }
}

void putNsort(int &target, vector<int> &arr)
{
    int c = 0;
    int s = 0;
    int e = arr.size() - 1;
    while (e >= s)
    {
        int mid = (s + e) / 2;
        if (arr[mid] > target)
        {
            e = mid - 1;
        }
        else
        {
            c = mid + 1;
            s = mid + 1;
        }
    }
    
    arr.push_back(INT_MAX);
    for (int j = arr.size() - 1; j > c - 1; j--)
    {
        arr[j + 1] = arr[j];
    }
    arr[c] = target;

    for (int i = 0; i < arr.size(); i++)
    {
        cout << arr[i] << ' ';
    }
    cout << endl;
}

int main()
{
    int n, k;
    vector<int> arr;
    cin >> n;
    inputArr(n, arr);
    cin >> k; //number of times we need to insert an element
    for (int i = 0; i < k; i++)
    {
        int target;
        cin >> target;
        putNsort(target, arr);
    }

    return 0;
}
*******************************************************************************************************************************
STRONG PASSWORD
Its length is at least 6 .
It contains at least one digit.
It contains at least one lowercase English character.
It contains at least one uppercase English character.
It contains at least one special character. The special characters are: !@#$%^&*()-+

SOLUTION:

#include <iostream>
#include <strings.h>
using namespace std;
int main()
{
    string str;
    int n;
    cin>>n;
    cin>>str;
    int i, a = 1, b = 1, c = 1, d = 1;
    for (i = 0; i < str.length(); i++)
    {

        if (islower(str[i]))
            a = 0;
        if (isupper(str[i]))
            b = 0;
        if (isdigit(str[i]))
            c = 0;
        if (str[i] >= 32 && str[i] <= 47)
            d = 0;
    }
    if ((str.length() + a+b+c+d) >= 6)
    {
        cout << a + b + c + d;
    }
    else{
        cout<< 6 - str.length(); 
    }
        cout <<endl;
}

*****************************************************************************************************************************************
diff of diagonal of matrix
input
3
11 2 4
4 5 6
10 8 -12

# include<iostream>
using namespace std;
int main(){
    int arr[100][100];
    int i ,j,n,d1=0,d2=0;
    cin>>n;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            cin>>arr[i][j];
        }
    }
    for(i=0;i<n;i++){...........................matrix using one iteration
        d1 = d1+arr[i][i];

    }
    for(i=0;i<n;i++){....................................matrix using one iteration
        d2 = d2 + arr[i][n-i-1];
    }
    int diff = d1-d2;
    if(d1>d2){
        cout<<diff;
    }
    else
    cout<<-(diff);
}

output:
15
*********************************************************************************************************************************
time conversion:

# include<iostream>
# include<string.h>
using namespace std;
int main(){
    string s;
    cin>>s;
    if(s[8]=='P'){
        if(s[0]== '1' && s[1] == '2'){
            s[0]='1';
         s[1]='2';
         }
         else{
        s[0] = s[0] + 1 ;
        s[1] = s[1] + 2 ;
         }
    }
    else{
        if(s[0]== '1' && s[1] == '2'){
            s[0]= s[1]='0';
        }
    }
    for(int i=0 ; i<s.length()-2;i++){
        cout<<s[i];
    }
}
********************************************************************************************





































